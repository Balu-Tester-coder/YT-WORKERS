"use strict";
/**
 * Copyright 2017 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.limits = exports.history = exports.sessions = exports.launch = exports.connect = void 0;
const Puppeteer_js_1 = require("./common/Puppeteer.js");
const WorkersWebSocketTransport_js_1 = require("./common/WorkersWebSocketTransport.js");
__exportStar(require("./common/NetworkConditions.js"), exports);
__exportStar(require("./common/QueryHandler.js"), exports);
__exportStar(require("./common/DeviceDescriptors.js"), exports);
__exportStar(require("./common/Errors.js"), exports);
// initializePuppeteer('puppeteer-core');
const FAKE_HOST = 'https://fake.host';
class PuppeteerWorkers extends Puppeteer_js_1.Puppeteer {
    constructor() {
        super({ isPuppeteerCore: true });
        this.connect = this.connect.bind(this);
        this.launch = this.launch.bind(this);
        this.sessions = this.sessions.bind(this);
        this.history = this.history.bind(this);
        this.limits = this.limits.bind(this);
    }
    /**
     * Launch a browser session.
     *
     * @param endpoint - Cloudflare worker binding
     * @returns a browser session or throws
     */
    async launch(endpoint, options) {
        let acquireUrl = `${FAKE_HOST}/v1/acquire`;
        if (options === null || options === void 0 ? void 0 : options.keep_alive) {
            acquireUrl = `${acquireUrl}?keep_alive=${options.keep_alive}`;
        }
        const res = await endpoint.fetch(acquireUrl);
        const status = res.status;
        const text = await res.text();
        if (status !== 200) {
            throw new Error(`Unable to create new browser: code: ${status}: message: ${text}`);
        }
        // Got a 200, so response text is actually an AcquireResponse
        const response = JSON.parse(text);
        return this.connect(endpoint, response.sessionId);
    }
    /**
     * Returns active sessions
     *
     * @remarks
     * Sessions with a connnectionId already have a worker connection established
     *
     * @param endpoint - Cloudflare worker binding
     * @returns List of active sessions
     */
    async sessions(endpoint) {
        const res = await endpoint.fetch(`${FAKE_HOST}/v1/sessions`);
        const status = res.status;
        const text = await res.text();
        if (status !== 200) {
            throw new Error(`Unable to fetch new sessions: code: ${status}: message: ${text}`);
        }
        const data = JSON.parse(text);
        return data.sessions;
    }
    /**
     * Returns recent sessions (active and closed)
     *
     * @param endpoint - Cloudflare worker binding
     * @returns List of recent sessions (active and closed)
     */
    async history(endpoint) {
        const res = await endpoint.fetch(`${FAKE_HOST}/v1/history`);
        const status = res.status;
        const text = await res.text();
        if (status !== 200) {
            throw new Error(`Unable to fetch account history: code: ${status}: message: ${text}`);
        }
        const data = JSON.parse(text);
        return data.history;
    }
    /**
     * Returns current limits
     *
     * @param endpoint - Cloudflare worker binding
     * @returns current limits
     */
    async limits(endpoint) {
        const res = await endpoint.fetch(`${FAKE_HOST}/v1/limits`);
        const status = res.status;
        const text = await res.text();
        if (status !== 200) {
            throw new Error(`Unable to fetch account limits: code: ${status}: message: ${text}`);
        }
        const data = JSON.parse(text);
        return data;
    }
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    async connect(endpointOrOptions, sessionId) {
        if (!sessionId) {
            return super.connect(endpointOrOptions);
        }
        const endpoint = endpointOrOptions;
        try {
            const transport = await WorkersWebSocketTransport_js_1.WorkersWebSocketTransport.create(endpoint, sessionId);
            return super.connect({ transport, sessionId: sessionId });
        }
        catch (e) {
            throw new Error(`Unable to connect to existing session ${sessionId} (it may still be in use or not ready yet) - retry or launch a new browser: ${e}`);
        }
    }
}
const puppeteer = new PuppeteerWorkers();
exports.default = puppeteer;
exports.connect = puppeteer.connect, exports.launch = puppeteer.launch, exports.sessions = puppeteer.sessions, exports.history = puppeteer.history, exports.limits = puppeteer.limits;
//# sourceMappingURL=puppeteer-core.js.map