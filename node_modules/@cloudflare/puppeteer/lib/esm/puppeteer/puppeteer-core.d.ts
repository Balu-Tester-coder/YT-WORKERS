/**
 * Copyright 2017 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Browser } from './common/Browser.js';
import { BrowserWorker } from './common/BrowserWorker.js';
import { Puppeteer, ConnectOptions } from './common/Puppeteer.js';
export * from './common/NetworkConditions.js';
export * from './common/QueryHandler.js';
export * from './common/DeviceDescriptors.js';
export * from './common/Errors.js';
export { BrowserWorker } from './common/BrowserWorker.js';
declare global {
    interface Response {
        readonly webSocket: WebSocket | null;
    }
    interface WebSocket {
        accept(): void;
    }
}
export interface AcquireResponse {
    sessionId: string;
}
export interface ActiveSession {
    sessionId: string;
    startTime: number;
    connectionId?: string;
    connectionStartTime?: string;
}
export interface ClosedSession extends ActiveSession {
    endTime: number;
    closeReason: number;
    closeReasonText: string;
}
export interface SessionsResponse {
    sessions: ActiveSession[];
}
export interface HistoryResponse {
    history: ClosedSession[];
}
export interface LimitsResponse {
    activeSessions: Array<{
        id: string;
    }>;
    maxConcurrentSessions: number;
    allowedBrowserAcquisitions: number;
    timeUntilNextAllowedBrowserAcquisition: number;
}
export interface LaunchOptions {
    keep_alive?: number;
}
declare class PuppeteerWorkers extends Puppeteer {
    constructor();
    /**
     * Launch a browser session.
     *
     * @param endpoint - Cloudflare worker binding
     * @returns a browser session or throws
     */
    launch(endpoint: BrowserWorker, options?: LaunchOptions): Promise<Browser>;
    /**
     * Returns active sessions
     *
     * @remarks
     * Sessions with a connnectionId already have a worker connection established
     *
     * @param endpoint - Cloudflare worker binding
     * @returns List of active sessions
     */
    sessions(endpoint: BrowserWorker): Promise<ActiveSession[]>;
    /**
     * Returns recent sessions (active and closed)
     *
     * @param endpoint - Cloudflare worker binding
     * @returns List of recent sessions (active and closed)
     */
    history(endpoint: BrowserWorker): Promise<ClosedSession[]>;
    /**
     * Returns current limits
     *
     * @param endpoint - Cloudflare worker binding
     * @returns current limits
     */
    limits(endpoint: BrowserWorker): Promise<LimitsResponse>;
    /**
     * Establish a devtools connection to an existing session
     *
     * @param endpoint - Cloudflare worker binding
     * @param sessionId - sessionId obtained from a .sessions() call
     * @returns a browser instance
     */
    connect(endpoint: BrowserWorker, sessionId: string): Promise<Browser>;
    /**
     * Establish a devtools connection to an existing session
     *
     * @param options - ConnectOptions
     * @returns a browser instance
     */
    connect(options: ConnectOptions): Promise<Browser>;
}
declare const puppeteer: PuppeteerWorkers;
export default puppeteer;
export declare const connect: {
    (endpoint: BrowserWorker, sessionId: string): Promise<Browser>;
    (options: ConnectOptions): Promise<Browser>;
}, launch: (endpoint: BrowserWorker, options?: LaunchOptions) => Promise<Browser>, sessions: (endpoint: BrowserWorker) => Promise<ActiveSession[]>, history: (endpoint: BrowserWorker) => Promise<ClosedSession[]>, limits: (endpoint: BrowserWorker) => Promise<LimitsResponse>;
//# sourceMappingURL=puppeteer-core.d.ts.map